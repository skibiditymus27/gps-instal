# GPS INSTAL – full stack (frontend + backend)

Responsive marketing site for GPS INSTAL backed by a hardened API that accepts contact requests, persists them in PostgreSQL, and optionally emails notifications.

## Project layout
- `frontend/` – static assets (HTML, CSS, JS, favicon).
- `backend/` – Express service with PostgreSQL, validation, logging, and email notifications.
- `nginx/` – reverse proxy configuration used by Docker to serve the frontend and proxy API calls.
- `docker-compose.yml` – spins up PostgreSQL, backend, and Nginx in one stack.

## Frontend (`frontend/`)
- Semantic `index.html` with navigation, skip link, sections for About, Services, Projects, Reviews, Contact, and CTA.
- `style.css` brings responsive layout, custom properties, `clamp()` typography, and reduced-motion support.
- `script.js` handles reveal animations via `IntersectionObserver`, client validation (including honeypot), modal focus management, and POSTing to `/api/contact`.
- `favicon.svg` delivers a lightweight brand icon.

## Backend (`backend/`)
- Express server secured with Helmet, rate limiting, HPP, and strict CORS whitelist.
- Request validation via `zod`, structured logging, and asynchronous email notifications through Nodemailer (optional).
- PostgreSQL persistence (`contact_requests` table) seeded by `sql/init.sql`.
- Automated tests with Jest + Supertest, Dockerfile, and `.env.example` for configuration.

### Core endpoints
- `POST /api/contact` – validates payload, stores the request, and triggers a notification (non-blocking).
- `GET /api/health` – checks API status and database connectivity for monitoring.

## Local setup
1. Clone the repository and `cd` into the project.
2. Copy `backend/.env.example` to `backend/.env`, then populate database credentials, allowed origins, and SMTP settings if you plan to send emails.
3. Launch the stack:
	```bash
	docker compose up --build
	```
	The site becomes available on port 80 (Nginx serves the frontend and proxies `/api` to the backend).

## Backend tests
```bash
cd backend
npm install
npm test
```

## Next steps
- Verify `.env` values (unique DB password, trusted origins, SMTP account) before deploying anywhere public.
- Point DNS / reverse proxy with HTTPS (e.g., Let’s Encrypt) at the Nginx service when running in production.
- Enable monitoring: scrape `/api/health`, collect container logs, and schedule database backups.
- Integrate with your CRM or helpdesk if you need automatic lead assignment.

## Tech stack
- Frontend: HTML5, CSS3, Vanilla JavaScript (ES6+)
- Backend: Node.js (Express), PostgreSQL, Nodemailer, Jest/Supertest
- Infrastructure: Docker, Nginx reverse proxy
